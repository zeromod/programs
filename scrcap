#!/bin/bash

# Configuration
OUTPUT_IMAGE_NAME="screencap.png" 
HTML_VIEWER="image_viewer.html"
DEFAULT_DELAY_SECONDS="1" # Unified delay for both ADB capture and browser refresh, now 1 second
VERBOSE=false # Default to non-verbose

# --- Argument Parsing ---
# Loop through arguments to check for verbose flag and delay
while [[ "$#" -gt 0 ]]; do
    case "$1" in
        -v|--verbose)
            VERBOSE=true
            shift # Consume the flag
            ;;
        *) # Any other argument is assumed to be the delay
            if [[ -z "$DELAY_SECONDS" ]]; then # Only set if not already set
                DELAY_SECONDS="$1"
            fi
            shift # Consume the argument
            ;;
    esac
done

# If delay not set by argument, use default
if [[ -z "$DELAY_SECONDS" ]]; then
    DELAY_SECONDS="$DEFAULT_DELAY_SECONDS"
fi

# --- Helper function for verbose output ---
log_verbose() {
    if $VERBOSE; then
        echo "$@"
    fi
}

# --- Initial Information (now verbose only) ---
log_verbose "Starting live screencap. Press Ctrl+C to stop."
log_verbose "Unified delay set to: ${DELAY_SECONDS} seconds."

# --- Create Temporary Directory ---
# Create a unique temporary directory
TEMP_DIR=$(mktemp -d -t adb_live_preview_XXXX)

# Check if temp directory was created successfully
if [[ ! -d "$TEMP_DIR" ]]; then
    echo "ERROR: Failed to create temporary directory." >&2 # This error is always printed
    exit 1
fi

# Define file paths within the temporary directory
OUTPUT_FILENAME="$TEMP_DIR/$OUTPUT_IMAGE_NAME"
HTML_VIEWER="$TEMP_DIR/image_viewer.html"

log_verbose "Temporary directory created: $TEMP_DIR"
log_verbose "Output image path: $OUTPUT_FILENAME"
log_verbose "HTML viewer path: $HTML_VIEWER"

# --- Cleanup on Exit ---
# Use a trap to ensure the temporary directory is removed when the script exits,
# whether due to success, error, or Ctrl+C.
trap 'log_verbose "Cleaning up temporary directory: $TEMP_DIR"; rm -rf "$TEMP_DIR"; exit' EXIT HUP INT QUIT TERM

# --- HTML File Generation ---
# HTML file is now ALWAYS rewritten to ensure the delay is current
log_verbose "Generating '$HTML_VIEWER' with current delay: ${DELAY_SECONDS}s..."
cat <<EOF > "$HTML_VIEWER"
<!DOCTYPE html>
<html>
<head>
    <title>Live Device Preview</title>
    <style>
        body {
            margin: 0;
            overflow: hidden;
            background-color: #000; /* Optional: black background */
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
        }
        canvas {
            display: block;
            /* Maintain aspect ratio and fit to window */
            max-width: 100vw;
            max-height: 100vh;
            image-rendering: -webkit-optimize-contrast;
            image-rendering: crisp-edges;
        }
    </style>
    <script>
        let canvas, ctx;
        let lastKnownWidth = 0;
        let lastKnownHeight = 0;

        function refreshImage() {
            // Updated image URL to screencap.png
            const imageUrl = '${OUTPUT_IMAGE_NAME}'; 
            const img = new Image();

            img.onload = () => {
                if (img.width !== lastKnownWidth || img.height !== lastKnownHeight) {
                    canvas.width = img.width;
                    canvas.height = img.height;
                    lastKnownWidth = img.width;
                    lastKnownHeight = img.height;
                }
                ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
            };

            img.onerror = () => {
                console.error("Failed to load image:", img.src);
            };

            img.src = imageUrl + '?' + new Date().getTime();
        }

        document.addEventListener('DOMContentLoaded', () => {
            canvas = document.getElementById('liveCanvas');
            ctx = canvas.getContext('2d');
            // This delaySeconds now comes directly from the generated HTML
            const delaySeconds = parseFloat(document.body.dataset.refreshDelay || "0.1");
            refreshImage();
            setInterval(refreshImage, delaySeconds * 1000);
        });
    </script>
</head>
<body data-refresh-delay="${DELAY_SECONDS}"> 
<canvas id="liveCanvas"></canvas>
</body>
</html>
EOF

# Attempt to open the HTML file in the default browser
log_verbose "Opening live preview in browser..."
open "$HTML_VIEWER" & # 'open' command opens files with their default application

# Give browser a moment to launch
sleep 1

while true; do
    # Capture screenshot and save directly to local file
    # Ensure adb is writing to the correct path in the temp directory
    adb exec-out screencap -p > "$OUTPUT_FILENAME" 2>/dev/null

    # Add the unified delay
    sleep "$DELAY_SECONDS"
done
